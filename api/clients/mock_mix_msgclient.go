// Code generated by MockGen. DO NOT EDIT.
// Source: mix_msgclient.go

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	abi "github.com/filecoin-project/go-state-types/abi"
	types "github.com/filecoin-project/venus/venus-shared/types"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
)

// MockIMixMessage is a mock of IMixMessage interface.
type MockIMixMessage struct {
	ctrl     *gomock.Controller
	recorder *MockIMixMessageMockRecorder
}

// MockIMixMessageMockRecorder is the mock recorder for MockIMixMessage.
type MockIMixMessageMockRecorder struct {
	mock *MockIMixMessage
}

// NewMockIMixMessage creates a new mock instance.
func NewMockIMixMessage(ctrl *gomock.Controller) *MockIMixMessage {
	mock := &MockIMixMessage{ctrl: ctrl}
	mock.recorder = &MockIMixMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMixMessage) EXPECT() *MockIMixMessageMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockIMixMessage) GetMessage(ctx context.Context, mid cid.Cid) (*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, mid)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockIMixMessageMockRecorder) GetMessage(ctx, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockIMixMessage)(nil).GetMessage), ctx, mid)
}

// GetMessageChainCid mocks base method.
func (m *MockIMixMessage) GetMessageChainCid(ctx context.Context, mid cid.Cid) (*cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageChainCid", ctx, mid)
	ret0, _ := ret[0].(*cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageChainCid indicates an expected call of GetMessageChainCid.
func (mr *MockIMixMessageMockRecorder) GetMessageChainCid(ctx, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageChainCid", reflect.TypeOf((*MockIMixMessage)(nil).GetMessageChainCid), ctx, mid)
}

// PushMessage mocks base method.
func (m *MockIMixMessage) PushMessage(ctx context.Context, msg *types.Message, msgSendSpec *types.MessageSendSpec) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", ctx, msg, msgSendSpec)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockIMixMessageMockRecorder) PushMessage(ctx, msg, msgSendSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockIMixMessage)(nil).PushMessage), ctx, msg, msgSendSpec)
}

// SearchMsg mocks base method.
func (m *MockIMixMessage) SearchMsg(ctx context.Context, from types.TipSetKey, mCid cid.Cid, loopBackLimit abi.ChainEpoch, allowReplaced bool) (*types.MsgLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMsg", ctx, from, mCid, loopBackLimit, allowReplaced)
	ret0, _ := ret[0].(*types.MsgLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMsg indicates an expected call of SearchMsg.
func (mr *MockIMixMessageMockRecorder) SearchMsg(ctx, from, mCid, loopBackLimit, allowReplaced interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMsg", reflect.TypeOf((*MockIMixMessage)(nil).SearchMsg), ctx, from, mCid, loopBackLimit, allowReplaced)
}

// WaitMsg mocks base method.
func (m *MockIMixMessage) WaitMsg(ctx context.Context, mCid cid.Cid, confidence uint64, loopBackLimit abi.ChainEpoch, allowReplaced bool) (*types.MsgLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMsg", ctx, mCid, confidence, loopBackLimit, allowReplaced)
	ret0, _ := ret[0].(*types.MsgLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitMsg indicates an expected call of WaitMsg.
func (mr *MockIMixMessageMockRecorder) WaitMsg(ctx, mCid, confidence, loopBackLimit, allowReplaced interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMsg", reflect.TypeOf((*MockIMixMessage)(nil).WaitMsg), ctx, mCid, confidence, loopBackLimit, allowReplaced)
}
